// thriftsupplierpart.andl -- set up for access by Thrift API
// 

// Run setup.bat to do some cleanup and these two steps.
// 1. Compile this with -t and output to <sp> database
//      >Andl.exe ThriftSupplierPart.andl sp -t
// 2. Compile generated interface with Thrift and csharp output
//      >Thrift --gen csharp ThriftSupplierPart.thrift

// Then do this.
// 3. Build the ThriftSupplierPart client: ThriftSupplierPart (compiles and links to generated code)
// 4. Run the Thrift server (Ctrl+C to shut down): 
//      >Andl.Thrift.exe sp
// 5. From another session, run the ThriftSupplierPart client
//      >ThriftSupplierPart.exe

#catalog new update

'thriftsupplierpart.andl -- set up for access by Thrift API'

// load initial data
var S:{S#,SNAME,STATUS:number,CITY}(csv)
var P:{P#,PNAME,COLOR,WEIGHT:number,CITY}(csv)
var SP:{S#,P#,QTY:number}(csv)

Supplier := S .select{ *Sid:=S# }
Part := P .select{ *Pid := P# }
Supplies := SP .select{ *Sid := S#, Pid:= P# }
Tquery := {{ Key:text,Value:text }}

// CRUD interface for supplier table

def find_supplier(sid:text) => do {
    Supplier .where(Sid = sid)
}

def findall_supplier() => do {
    Supplier .order(Sid)
}

def create_supplier(s:Supplier) => do {
    update Supplier union s
}

def delete_supplier(sid:text) => do {
    update Supplier .where(Sid = sid) .select{}
}

def update_supplier(sid:text, s:Supplier) => do {
    update Supplier .where(Sid = sid) .select{}
    update Supplier union s
}

def findall_part() => Part

def findsome_part(query:Tquery) => do {
    pattern := query .where(Key = 'PNAME') .select{ (Value) }
    Part .where(PNAME =~ pattern)
}

findall_supplies => Supplies
findsome_part({{ Key := 'PNAME', Value := 'S.*' }})

andl_catalog
//andl_operator()
