// Sample use of .while
// Similar to recursive common table expressions in SQL
//
// 1. Start with a seed relation value. 
// 2. Evaluate an expression with every tuple
// 3. Add any new tuples to the start value.
// 4. Repeat until there are no more new tuples.

#noisy 1

// Generate some integers
{{ z:=0 }} .while( {{z:=z+1}} .where(z<10) )

// Generate some squares
{{ x:= 1 }} .while( {{ x:=x*2 }} .where(x<=1000) )


// Flatten org chart to show levels
var orgchart(csv)
orgchart
org := {{ name:= 'Alice', level := 0 }} .while( {{ boss := name, level := level+1 }} compose orgchart)
org
org .select{ t:=fill('.', level*3) & name }

// Flatten family tree to show descendants
var family_tree:{id:number,firstname,lastname,year_of_birth:number,year_of_death:number,father_id:number,mother_id:number}(csv)
family_tree

family_tree .where(id=1) .select{ id, firstname, lastname, level:=0 }
   .while( {{ father_id:=id, level:=level+1 }} compose family_tree .select{ id, firstname, lastname,father_id } )

// generate transitive closure
var MM(csv)
MM
MM .while( {{ z:=MAJOR_P#, MINOR_P# }} compose MM .select{ MAJOR_P#, z:=MINOR_P# } )
MM .while( {{ MAJOR_P#, z:=MINOR_P# }} compose MM .select{ z:=MAJOR_P#, MINOR_P# } )

// from this SQL
//WITH RECURSIVE
//  under_alice(name,level) AS (
//    VALUES('Alice',0)
//    UNION ALL
//    SELECT org.name, under_alice.level+1
//      FROM org JOIN under_alice ON org.boss=under_alice.name
//     ORDER BY 2
//  )
//SELECT substr('..........',1,level*3) || name FROM under_alice;

#stop
