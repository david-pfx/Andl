// Andl samples 1 -- scalar
// Aim is to show an example of every feature

// Depends on catalog created by setup.andl
#catalog
#noisy 1

// Note that a free expression is evaluated and pretty printed immediately

//=== Literals ===

// Text
'Hello world!'
"Hello world!"

// Adjacent strings are combined into one
"Hel""lo" ' World' "!"

// d-string is decimal Unicode char
"Hello" & d'32 87' & "orld"

// h-string is hex Unicode char
"Hello" & h'20 57' & "orld"

// These are Greek characters (but you may not see them) and CRLF
h'3a0 20 3c1 20 3c3 d a'

// Special quoted strings
// t-string is a Time
t'2015/12/31'
t'2015/12/31 12:59:59'

// i-string is an identifier
i'x( )' := 'Hello world!'
i'x(' h'20' ')'

// b-string is binary
b'0102030405aaBBcCDdEEf'

// Number: all show as 42
42
0042
42.000
$2a         // hex

wait
//=== Expressions ===
// Logical: all true
true = not false
3 <> 4
'ABC' > 'abc'                       // native collating sequence
t'2015/12/31' < t'01/01/2016'       // native date/time comparison
'Z' >= 'A' and (3<=4 or (true xor false))

// Numeric: all 42
5-8*6/4+7**2                        // precedence
(58.1 div 8.2) * (86.4 mod 8.9)     // integer operations
(9 or 7) and (9 xor 3) xor 32       // bitwise operations on integers

// String: mostly Hello World!
'Hello' & " " & 'World!'
trim('Hello ') & ' ' & trim(' World') & trim('   !   ')
fill(' ',10) & fill('Hello Planet???', 5) & fill(' World!', 35)
before(after("@@@>>>Hello World!<<<@@@", '>>>'), '<<<')
toupper('h') & tolower('ELLO') & toupper(' w') & tolower('ORLD!')

// String: other
length('world')
// dot notation can be used for any function with a single argument
'hello'.length = length('world')
// coerce to string
12345.67890 .text
12345.67890 .format
12345.67890 .pp

// The & operator converts its arguments to strings and concatenates them
"Date: " & t'2015/12/31' & " number:" & 12345 & " logical:" & (2=2)

// Special: if(), only evaluates one of its arguments
if(true,'Hello World!', "goodbye!")
if(2>2,1/0, 7*6)

wait
//=== Statements ===
// Assignment -- evaluated once
v1 := 'Hello World!'
v1

// Send text to standard output (console)
write(v1)

// Read a line of text from the standard input (console)
// Uncomment this to see it work
//vin := read()
//output := 'You typed <' & vin & '>'

// read a file as a relation of lines of text {{ Line:text }}
// requires #source if run on server
//var testinput(txt)
//testinput

wait
// Deferred assignment -- evaluated every time it is used
v2 => v1
v2

// do block creates a local scope and returns value of last expression (statement returns void)
do {
  vx := v1
  vx
}

// Deferred evaluation with do block
v3 => do {
  vx := v1
  vx
}
v3

// Deferred evaluation with do block and arguments defines a function
// Note that local variables names can be reused
v4(a:'') => do {
  vx := a
  vx
}
v4(v1)

// Arguments can be specified with literal types or with other objects
tt := t'01/01/2001'
v5(a:'',b:0,c:false,d:tt) => do {
  a & b & c & d
}
v5(v1,42,true,t'31/12/2015')

// Arguments can be specified with named types
v6(a:text,b:number,c:bool,d:time) => do {
  a & b & c & d
}
v6(v1,42,true,t'2015/01/01')

// Usually the function type is determined by type inference. However for 
// recursion, the function name must be typed explicitly
fact:0(n:0) => if(n<=1,1,n*fact(n-1))
fact(20)

wait
// ===== Types =====

// create a user-defined type, with components of any type
def ut0(t:text)
u0 := ut0('abc')
// show the value
u0
// get a component value
u0.t
// as a string
'The value ' & u0 & ' and its component ' & u0.t

// multiple components
def ut1(n:number, t:text, d:time)
uv2 := 'Hello World!'
t2 := t'2015/01/31'
u1 := ut1(42, uv2, t2)
"n:" & u1.n & " t:" & u1.t & " d:" & u1.d
u2 := ut1(41, "!"&uv2, t'2000/01/01')
"n:" & u2.n & " t:" & u2.t & " d:" & u2.d

// Comparison left-to-right
u1 > u2

// Deferred function
f7(u:ut1) => do {
    "n:" & u.n & " t:" & u.t & " d:" & u.d
}
f7(u1)
f7(u2)

// end
