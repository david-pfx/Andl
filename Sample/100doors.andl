// The 100 doors problem -- http://rosettacode.org/wiki/100_doors

// number of doors
ndoors := 100

// a relation that is a set of integers N from 1 to ndoors 
numset := seq(ndoors)  .select{ N:=N+1 } 

// a function to work out the final state of each door
// a true value means this door was flipped on pass N
// the values are folded using xor aggregation to produce a final result
def isopen(x:0) => numset .select{ fold(xor, mod(x,N) = 0) }

// an outer loop that applies the function to all doors
doors := numset .select{ *open := isopen(N) }

// pick the open doors, sort in door order, show only N
// pretty print and write the result
doors .where(open) .order(N) .select{ N } .pp .write
