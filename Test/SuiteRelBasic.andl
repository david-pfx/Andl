// Suite Relational Basics -- literals, set operators, where, select, order

#catalog

start($filename$)

// load CSV data
var S:{S#,SNAME,STATUS:number,CITY}(csv)

//--- literals

//-- tuples
tup1 := { A1 := 'abc', A2 := 17, A3 := 0 } 
tup2 := tup(A1 := 'abc', A4 := 44)
tup3 := { A := tup1 } 
tup4 := { A := { A := 'abc' } } 
tup5 := { A := tup(A := 'abc') } 
type ust6(C1:0, C2:'')
tup6 := { A := ust6(77,'xxx') } 
//tup7 := tup(ust6(42, 'abc'))

// tuple values
test_true($lineno$, tup1 = {A2 := 16+1, A1 := 'ab' & 'c', A3 := 0})
test_true($lineno$, {A2 := 18-1, A1 := 'a''bc', A3 := 0}    = tup1)
test_true($lineno$, ({A2 := 17, A1 := "abc", A3 := 0})      = tup1)
test_true($lineno$, tup(A2 := 17, A1 := "abc", A3 := 0)     = tup1)
test_true($lineno$, tup4                                    = tup5)
test_true($lineno$, { A := tup(A := 'abc') }                = tup5)
test_true($lineno$, { A := ust6(77,'xxx') }                 = tup6)
//test_true($lineno$, tup(ust6(42, 'abc'))                    = tup7)

// tuple set ops
test_true($lineno$, { A1 := 'abc', A2 := 17, A3 := 0, A4 := 44 } = tup1 union tup2)
test_true($lineno$, { A1 := 'abc', A2 := 17, A3 := 0, A4 := 44 } = tup2 union tup1)
test_true($lineno$, { A1 := 'abc' }                              = tup1 intersect tup2)
test_true($lineno$, { A1 := 'abc' }                              = tup2 intersect tup1)
test_true($lineno$, { A2 := 17, A3 := 0 }                        = tup1 minus tup2)
test_true($lineno$, { A2 := 17, A3 := 0 }                        = tup2 rminus tup1)
test_true($lineno$, { A4 := 44 }                                 = tup2 minus tup1)
test_true($lineno$, { A4 := 44 }                                 = tup1 rminus tup2)
test_true($lineno$, { A2 := 17, A3 := 0, A4 := 44 }              = tup1 symdiff tup2)
test_true($lineno$, { A2 := 17, A3 := 0, A4 := 44 }              = tup2 symdiff tup1)

//-- relations
rel0 := rel:{A2:0, A1:'', A3:0}()
rel1 := rel({A2 := 17, A1 := 'abc', A3 := 0})
rel2 := {{A1 := 'def', A2 := 35, A3 := 0},
         {A2 := 199, A1 := 'ghij', A3 := 0 }} 
rel3 := rel:{A1:'', A2:0, A3:0} (
          ('abc', 17, 0), 
          ('def', 35, 0), 
          ('ghij', 199, 0) )
var rel4:=rel0
var rel5:{A2:0, A1:'', A3:0}
var rel6:{{A2:0, A1:'', A3:0}}
type usr0(A2:0, A1:'', A3:0)

test_true($lineno$, {{ A1 := 'abc', A2 := 17, A3 := 0 }}         = rel1)
test_true($lineno$, {{ A2 := 1+16, A1 := 'ab'&'c', A3 := 0 }}    = rel1)
test_true($lineno$, rel({ A2 := 18-1, A1 := 'a'&'bc', A3 := 0 }) = rel1)
test_true($lineno$, rel(tup1)                                   = rel1)
test_true($lineno$, rel:rel3()                                  = rel0)
test_true($lineno$, rel:usr0()                                  = rel0)

test_true($lineno$, rel3 = {{ A2 := 35, A1 := 'def', A3 := 0 },
      { A2 := 17, A1 := 'abc', A3 := 0},
      { A2 := 17, A1 := 'abc', A3 := 0},
      { A2 := 17, A1 := 'abc', A3 := 0},
      { A1 := 'ghij', A2 := 199, A3 := 0 }})

//-- mixture of types
asvbi := b'05040302'
asvbo := true
asvnu := 123456789.123456789  // beyond real
asvte := 'abc def' d'33'
asvti := t'2015-12-31 23:59:59.999'
asvtu := { A1 := 'abd def', A2 := 99 }
asvre  := {{ A1 := 'abd def', A2 := 99}, { A2 := 98, A1 := 'Pqr'}}
type astus(C1:0, C2:'')
asvus := astus(45, 'x-y%z')

// repeating literals ensures test of value semantics
asvall  := {{ bi := b'05040302', bo := true, nu := 123456789.123456789, te := 'abc def!', ti := t'2015-12-31 23:59:59.999',
                tu := { A1 := 'abd def', A2 := 99 }, re := {{ A1 := 'abd def', A2 := 99}, { A2 := 98, A1 := 'Pqr'}}, us := astus(45, 'x-y%z') 
            }}
test_true($lineno$, asvall = {{ bi := asvbi, bo := asvbo, nu := asvnu, te := asvte, ti := asvti, tu := asvtu, re := asvre, us := asvus }})

// test of database var, both ways

ASVREL := {{ bi := b'05040302', bo := true, nu := 123456789.123456789, te := 'abc def!', ti := t'2015-12-31 23:59:59.999',
                tu := { A1 := 'abd def', A2 := 99 }, re := {{ A1 := 'abd def', A2 := 99}, { A2 := 98, A1 := 'Pqr'}}, us := astus(45, 'x-y%z') 
            }}
test_true($lineno$, asvall = ASVREL)
test_true($lineno$, ASVREL = asvall)

//-- heading forms
test_true($lineno$, rel1 = rel:{ A1:'', A2:0, A3:0 } (('abc', 17, 0)) )
test_true($lineno$, rel1 = rel:{ A1:text, A2:number, A3:number } (('abc', 17, 0)) )
test_true($lineno$, rel3 = rel:{ A1:'', A2:0, A3:0 } (('abc', 17, 0), ('def', 35, 0), ('ghij',199, 0)) )
test_true($lineno$, rel3 = rel:{ A1:'', A2:0, A3:0 } (('abc', 17, 0), ('def', 35, 0), ('ghij',199, 0)) )

//--- simple operators

//-- count
test_true($lineno$, count({{:}}) = 0)
test_true($lineno$, count({{}}) = 1)
test_true($lineno$, count(rel0) = 0)
test_true($lineno$, count(rel1) = 1)
test_true($lineno$, count(rel3) = 3)
test_true($lineno$, {{:}} .count = 0)
test_true($lineno$, {{}} .count = 1)
test_true($lineno$, rel0 .count = 0)
test_true($lineno$, rel1 .count = 1)
test_true($lineno$, rel3 .count = 3)

//-- sub sup sep
test_true($lineno$, {{:}} sub {{:}})
test_true($lineno$, {{:}} sub {{}})
test_true($lineno$, {{}} sub {{}})
test_true($lineno$, rel0 sub rel0)
test_true($lineno$, rel0 sub rel1)
test_true($lineno$, rel0 sub rel3)
test_true($lineno$, rel1 sub rel1)
test_true($lineno$, rel1 sub rel3)
test_true($lineno$, rel3 sub rel3)

test_true($lineno$, {{:}} sup {{:}})
test_true($lineno$, {{}} sup {{:}})
test_true($lineno$, {{}} sup {{}})
test_true($lineno$, rel3 sup rel3)
test_true($lineno$, rel3 sup rel1)
test_true($lineno$, rel3 sup rel0)
test_true($lineno$, rel1 sup rel1)
test_true($lineno$, rel1 sup rel0)
test_true($lineno$, rel0 sup rel0)

test_true($lineno$, rel1 sep rel2)
test_true($lineno$, rel2 sep rel1)

//--- meta data uses internal table
rel2_meta := {{ Name := 'A1', Type := 'text'}, 
             { Name := 'A2', Type := 'number'},
             { Name := 'A3', Type := 'number'} }

test_true($lineno$, schema(rel3) = rel2_meta)
test_true($lineno$, rel3 .schema = rel2_meta)
//--- monadic RA

rel3_A1 := rel:{ A1:''} (('abc'), ('def'), ('ghij'))
rel3_A1X := rel:{ X:''} (('abc'), ('def'), ('ghij'))

//--- where
test_true($lineno$, rel3  = rel3 .where(true))
test_true($lineno$, rel0  = rel3 .where(false))
test_true($lineno$, rel0  = rel3 .where(A1 = 'xyz'))
test_true($lineno$, rel0  = rel3 .where(A2 = 0))
test_true($lineno$, rel1  = rel3 .where(A1 = 'abc'))
test_true($lineno$, rel1  = rel3 .where(A1 < 'def'))
test_true($lineno$, rel1  = rel3 .where(A2 = 17))
test_true($lineno$, rel1  = rel3 .where(A2 < 35))

test_true($lineno$, 3    = rel3 .where(true) .count)
test_true($lineno$, 0    = rel3 .where(false) .count)
test_true($lineno$, 2    = rel3 .where(A1 > 'abc') .count)
test_true($lineno$, 2    = rel3 .where(A2 > 17) .count)

//--- project
test_true($lineno$, {{:}}         = {{:}} .select{ } )
test_true($lineno$, {{}}          = {{}} .select{ } )
test_true($lineno$, {{}}          = rel1 .select{ } )
test_true($lineno$, rel3         = rel3 .select{ * } )
test_true($lineno$, rel3_A1      = rel3 .select{ A1 } )
test_true($lineno$, rel3_A1      = rel3 .select{ *A2, A3 } )
test_true($lineno$, {{ A3 := 0 }} = rel3 .select{ A3 } )
test_true($lineno$, {{ A3 := 0 }} = rel3 .select{ *A1, A2 } )

//--- rename
test_true($lineno$, {{ X := 0 }}  = rel3 .select{ X := A3 } )
test_true($lineno$, {{ X := 0 }}  = rel3 .select{ *A1, A2, X := A3 } )
test_true($lineno$, rel3_A1X     = rel3 .select{ X := A1 } )

//--- extend
rel3_A1Y := rel:{ Y:''} (('abcY'), ('defY'), ('ghijY'))
test_true($lineno$, rel3_A1Y     = rel3 .select{ Y := A1 & 'Y' } )
test_true($lineno$, rel3_A1Y     = rel3 .select{ *A1, A2, A3, Y := A1 & 'Y' } )

//--- lift
rel2_lift := rel:{A1:'', A2:0}(('a',1),('b',5),('c',2),)
test_true($lineno$, rel:{A2:0}((5),(1),(2)) = rel2_lift .select(A2) )
test_true($lineno$, rel:{A2:0}((5))         = rel2_lift .where(A1 = 'b') .select(A2) )
test_true($lineno$, 5                       = rel2_lift .where(A1 = 'b') .select((A2)) )
test_true($lineno$, rel:{A2:0}((5),(1),(2)) = rel2_lift .select{A2} )
test_true($lineno$, rel:{A2:0}((5))         = rel2_lift .where(A1 = 'b') .select{A2} )
test_true($lineno$, 5                       = rel2_lift .where(A1 = 'b') .select{(A2) } )


//--- skip take
//def get_s(s:S) => s .order(S#)  .select{ fold(&,S#) }
def test_s(s:S,t:'') => s .order(S#)  .select{ fold(&,S#) } = t

test_true($lineno$, test_s(S, 'S1S2S3S4S5'))
test_true($lineno$, test_s(S .take(2), 'S1S2'))
test_true($lineno$, test_s(S .skip(2), 'S3S4S5'))
test_true($lineno$, test_s(S .take(4) .skip(2), 'S3S4'))
test_true($lineno$, test_s(S .skip(2) .take(2), 'S3S4'))
test_true($lineno$, test_s(S .take(4) .skip(1) .take(2), 'S2S3'))
test_true($lineno$, test_s(S .skip(1) .take(3) .skip(1), 'S3S4'))

test_true($lineno$, S  .select{ S# } = {{ S# := 'S1' }, { S# := 'S2'}, { S# := 'S3'}, { S# := 'S4'}, { S# := 'S5' }} )
test_true($lineno$, S .skip(3)  .select{ S# } = {{ S# := 'S4'}, { S# := 'S5' }} )
test_true($lineno$, S  .select{ S# } = {{ S# := 'S1' }, { S# := 'S2'}, { S# := 'S3'}, { S# := 'S4'}, { S# := 'S5' }} )

//--- function types -- incomplete
def fn1bo(a:bool) => a
def fn1bi(a:binary) => a
def fn1nu(a:number) => a
def fn1te(a:text) => a
def fn1ti(a:time) => a

def fn2bo(a:bool) => not a
def fn2bi(a:binary) => b'05040302'  // no available func
def fn2nu(a:number) => a+1
def fn2te(a:text) => before(a,'world') & 'fred'
def fn2ti(a:time) => t'2016-12-31 23:59:59.999' // no available func

def fn3bo(a:bool) => fold(or,a)
def fn3bi(a:binary) => a // no available func
def fn3nu(a:number) => fold(+,a)
def fn3te(a:text) => fold(&,a)
def fn3ti(a:time) => a // no available func

r1 := {{ bo:=true, bi:=b'0102030405', nu:=123456789.123456789, te:='hello world', ti:=t'2015-12-31 23:59:59.999' }}
r2 := {{ bo:=false, bi:=b'05040302', nu:=123456790.123456789, te:='hello fred', ti:=t'2016-12-31 23:59:59.999' }}
r3 := r1
R := r1

test_true($lineno$, r1 = R)
test_true($lineno$, r1 = R .select{ bo := fn1bo(bo), bi := fn1bi(bi), nu := fn1nu(nu), te := fn1te(te), ti := fn1ti(ti) })
test_true($lineno$, r2 = R .select{ bo := fn2bo(bo), bi := fn2bi(bi), nu := fn2nu(nu), te := fn2te(te), ti := fn2ti(ti) })
test_true($lineno$, r3 = R .select{ bo := fn3bo(bo), bi := fn3bi(bi), nu := fn3nu(nu), te := fn3te(te), ti := fn3ti(ti) })

//-- scopes (particularly SQL)
// scope is param only
def fsc1(a:0,b:0) => do {
  a > b  
}
// scope is param and local var
def fsc1a(a:0,b:0) => do {
  c:=b
  a > c
}
// scope is attribute and param
def fsc2(a:0) => do {
  rel3 .where(A2 > a)
}
// scope is attribute and local
def fsc3(a:0) => do {
  b := a
  rel3 .where(A2 > b)
}
// scope is param, no block
def fsc4(a:0) => rel3 .where(A2 > a)

test_true($lineno$, 2 = rel3 .where(fsc1(A2, 17)) .count)
test_true($lineno$, 2 = rel3 .where(fsc1a(A2, 17)) .count)
test_true($lineno$, 2 = fsc2(17) .count)
test_true($lineno$, 2 = fsc3(17) .count)
test_true($lineno$, 2 = fsc4(17) .count)

finish($filename$)
