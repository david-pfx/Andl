// Andl grammar - Pegasus
// See: https://github.com/otac0n/Pegasus/wiki/Syntax-Guide

@namespace Andl.Peg
@classname PegParser
@using System.Linq

//--- block and statement machinery
// start rule: Init for error handling, Start to load catalog
MainStart <AstStatement> = &{ PrintLine(state) } &{ SetState(state) } DirectiveOrBlank* &{ Start() } v:MainNext { v }
    / MainRestart;  // suppress warning -- never taken

// Continue after error
MainRestart <AstStatement> =  Skip v:MainNext { v }

// Parse just one blank line, directive, statement or block
MainNext <AstStatement> =  v:MainStatement &{ SetState(state) } { v };
MainStatement <AstStatement> = WSO EOFX { AST(state).Eof() }
    / DirectiveOrBlank { AST(state).Empty() }
    / WSO v:Statement WSO (EOFX / EOLchk EOLX) { v };

// A do body is just {} or { statements }, EOF not allowed
DoBody <IList<AstStatement>> = WSO LCexp &{ AST(state).Enter() } WSC v:DoBodyLine* &{ AST(state).Exit() } WSO RCexp { v };

DoBodyLine <AstStatement> = DirectiveOrBlank { AST(state).Empty() } // Note: DoBlock must discard these
    / WSO !RC v:Statement WSO (&RC / EOLchk EOLX) { v };

//--- # directives
DirectiveOrBlank = BlankLine / DirectiveLine;
BlankLine = WSO &EOL EOLX;
DirectiveLine = Directive WSO EOLchk EOLX;      // take directive and end of line

Directive = "#" &{ PrintLine(state) } (CatalogDirective 
    / IncludeDirective 
    / NoisyDirective 
    / StopDirective 
    / SourceDirective 
    / PanicDirective 
    / BadDirective);

CatalogDirective = "catalog" IDX v:CatalogOption* (&EOL / &{ Error(state, "option expected") } ) { CatalogDirective(state, v) };
CatalogOption = v:("new" / "load" / "update" / "sql") IDX { v };

IncludeDirective = "include" IDX v:TextString { IncludeDirective(state, v) };

NoisyDirective = "noisy" IDX v:Integer { NoisyDirective(state, String.Concat(v)) };

SourceDirective = "source" IDX v:TextString { SourceDirective(state, v) };

StopDirective = "stop" IDX v:Integer? { StopDirective(state, String.Concat(v)) };

PanicDirective = "panic" IDX #ERROR{ "panic" };

BadDirective = &{ Error(state, "bad directive") };

//--- statements
Statement <AstStatement> = v:(Deferred 
    / Typedef 
    / Update
    / Assignment        // must precede Variable
    / VariableDecl
    / Expression 
    / BadStatement) { v };

BadStatement <AstStatement> = WSO RC &{ Error(state, "mismatched right brace") }  { null }
    / . &{ Error(state, "bad statement") }  { null };

    //TODO: list
Typedef <AstTypedef> = TYPE v:(UserType / Subtype)<0,,SEP> { AST(state).DefBlock(v) };

UserType <AstTypedef> = 
    v:DefGlobalExp LP &{ AST(state).Enter() } w:FieldList &{ AST(state).Exit() } RPexp 
    { AST(state).UserType(v, w.ToArray()) } ;

Subtype <AstTypedef> = 
    v:DefGlobalExp COLON w:TypeRef { AST(state).SubType(v, w) };

VariableDecl <AstBlock> = 
      VAR v:Vardecl<1,,SEP> { AST(state).VarBlock(v) }
    / VAR &{ Error(state, "identifier expected") }  { null };

Vardecl <AstStatement> = 
    v:DefGlobalExp w:VarTypeRef? x:VarSource?
    { AST(state).VarDecl(v,Single(w),Single(x)) };
VarTypeRef <AstType> = 
    COLON &{ AST(state).Enter() } a:TypeRef &{ AST(state).Exit() } { a } 
    / COLON &{ Error(state, "type reference expected") }  { null };
VarSource <AstLiteral> =
    LP a:SourceName RPexp { AST(state).Text(a) } 
    / LP &{ Error(state, "source expected") }  { null };

SourceName = v:Ident  &{ IsSourceName(v) } { v }
    / &{ Error(state, "source name expected") } { "" };

Update <AstStatement> = 
      UPDATE v:CatVar w:Funcop x:Funcop? y:ExpressionExp { AST(state).UpdateSetop(v,w,Single(x),y) }
    / UPDATE v:CatVar &{ AST(state).Enter(v) } 
             w:Restrict? x:TransformOrDelete &{ AST(state).Exit(true) } { AST(state).UpdateWhere(v,Single(w),x) }
    / UPDATE &{ Error(state, "bad update") }  { null };

TransformOrDelete <AstTransformer> = DOT LC RC { null }
    / DOT SELECT LP RP { null }
    / DOT SELECT LC RC { null }
    / x:Transformer { x }
    / . &{ Error(state, "missing update action") }  { null };

// updateable variable
CatVar <AstValue> = v:Ident &{ IsCatVar(v) } { AST(state).Variable(v) };

// Assignment -- must preced other uses of VAR
Assignment <AstStatement> = x:VAR? &(Ident LA) v:Ident LA w:Expression { AST(state).Assignment(v,w,Single(x)) }
    / Ident LA &{ Error(state, "expression expected") } { null };

// Deffun requires a field list either empty or ident colon
// otherwise will backtrack to function call
Deferred <AstStatement> = 
    v:Ident RA &{ AST(state).Enter(v,null,null) } y:DeferredBody &{ AST(state).Exit(true) } 
        { AST(state).Deferred(v,null,null,y) }
    / DEF v:Ident 
        w:(<AstType> COLON a:TypeRef { a } / { null }) 
        x:(<IList<AstField>> LP &(RP / Ident) &{ AST(state).Enter() } b:FieldList &{ AST(state).Exit() } RPexp { b }) RA 
        &{ AST(state).Enter(v,w,x) } y:DeferredBody &{ AST(state).Exit(true) } 
            { AST(state).Deferred(v,w,x,y) };

DeferredBody <AstBodyStatement> = v:Statement { AST(state).BodyStatement(v) }
    / BadStatement { null };

//--- expressions
ExpressionList = v:Expression<0,,SEP>;
Expression <AstValue> = v:Primary w:BinopTail* { AST(state).Binop(v,w) } 

BinopTail <AstOpCall> = v:Funcop &{ IsBinop(v) } WSC w:Primary { AST(state).OpCall(v,w) } 

Primary <AstValue> = v:Funcop &{ IsUnop(v) } w:Primary { AST(state).Unop(v,w) }
    / v:SimplePrimary &{ AST(state).Enter(v) } w:PostFix* &{ AST(state).Exit(true) } { AST(state).PostFix(v,w) };

//--- post fix operators
PostFix <AstCall> = &(WSL DOT) WSC v:PostFixBody { v }
    / DOT &{ Error(state, "component or function expected") } { null };

PostFixBody <AstCall> = v:Whiler { v }
    / v:Transformer { v }
    / v:Restrict { v }
    / v:Orderer { v }
    / v:DotFunc { v }
    / DOT v:Ident &{ IsComponent(v) } { AST(state).DotComponent(v) }
    / DOT v:FieldIdent { AST(state).DotField(v) };

//--- Tuple generators

Whiler <AstOpCall> = DOT v:Ident &{ IsWhile(v) } 
    &{ AST(state).Enter() } LPexp w:ExpressionExp &{ AST(state).Exit() } RPexp 
    { AST(state).While(v,w) };

Restrict <AstWhere> = DOT v:Ident &{ IsRestrict(v) } 
    &{ AST(state).Enter() } LPexp w:Expression &{ AST(state).Exit() } RPexp 
    { AST(state).Where(v,w) };

DotFunc <AstOpCall> = DOT v:Funcop LP w:ExpressionList RPexp { AST(state).DotFunc(v, w.ToArray()) }
    / DOT v:Funcop !LP { AST(state).DotFunc(v) };

Orderer <AstOrderer> = DOT ORDER LPexp v:OrderTermList RPexp { AST(state).Orderer(v) };

OrderTermList = OrderTerm<0,,SEP>;
OrderTerm <AstOrderField> = w:PERCENT? v:MINUS? x:FieldIdent { AST(state).OrderField(x, v.Count > 0, w.Count > 0) };

Transformer <AstTransformer> = DOT SELECT? LC WSC v:STAR? WSC w:TransformList SEP? RCexp { AST(state).Transformer(v.Count > 0, w) }
    / DOT SELECT LPexp WSC v:STAR? WSC w:TransformList SEP? RPexp { AST(state).Transformer(v.Count > 0, w) };

TransformList = Transform<0,,SEP>;
Transform <AstField> = !RC &{ AST(state).Enter() } v:TransformPrel &{ AST(state).Exit() } { v }
TransformPrel <AstField> = v:FieldIdent &(SEP / RC / RP) { AST(state).Transfield(v) }        // project
    / v:Ident LA WSC w:FieldIdent &(SEP / RC / RP) { AST(state).Transfield(v, w) }       // rename
    / v:Ident LA WSC w:OpenAttrExprExp { AST(state).Transfield(v, null, w) }        // extend
    / v:OpenAttrExprExp { AST(state).Transfield(null, null, v) };                   // lift

OpenAttrExprExp = (Expression 
    / &{ Error(state, "invalid attribute expression") } { null });
ExpressionExp = Expression
    / &{ Error(state, "invalid expression") } { null };

//----- Primaries
SimplePrimary = DoBlock 
    / LP v:Expression RPexp { v }
    / Table / Row
    / Fold / If
    / Function
    / v:Literal { v }
    / v:VarIdent  { AST(state).Variable(v) }
    / v:Ident &{ Error(state, "undefined '{0}'", v) } { null };

If <AstValue> = v:Ident &{ IsIf(v) } LPexp w:Expression SEPexp x:Expression SEPexp y:Expression RPexp { AST(state).If(v,w,x,y) }
    / v:Ident &{ IsIf(v) } LP  &{ Error(state, "expression expected") } { null };

Fold <AstValue> = v:Ident &{ IsFold(v) } LPexp w:Funcop &{ IsFoldable(w) } SEPexp x:Expression RPexp { AST(state).Fold(v,w,x) }
    / v:Ident &{ IsFold(v) } &{ Error(state, "foldable operator expected") } { null };

DoBlock <AstValue> = v:Ident &{ IsDo(v) } w:DoBody { AST(state).DoBlock(v,w) }

Function <AstValue> = v:Funcop LP w:ExpressionList RPexp { AST(state).Function(v, w.ToArray()) };

// table literal
// resolve {{ ident : }} as headed body only if COLON seen
Table <AstValue> = 
    LC WSL &(LC COLON) v:TableHeadedBody RCexp { v }
    / LC WSL &(LC Ident COLON) &{ AST(state).Enter() } v:TableHeadedBody &{ AST(state).Exit() } RCexp { v }
    / LC WSL &LC &{ AST(state).Enter() } v:TableBody &{ AST(state).Exit() } RCexp { v }
    / REL LP &{ AST(state).Enter() } v:TableBody RPexp &{ AST(state).Exit() } { v }
    / REL COLON &{ AST(state).Enter() } v:TypeRef WSL LP w:TableExprList SEP? RPexp &{ AST(state).Exit() } { AST(state).Table(v,w) }
    / (REL / LC WSC LC) &{ Error(state, "invalid table body") } { null };

// special {{*}} or list of rows
TableBody <AstValue> = 
    LC STAR RCexp  { AST(state).Table() }
    / v:RowList SEP? { AST(state).Table(v) }
    / &{ Error(state, "table body expected") } { null };

// special {{ heading } (),(),() }
TableHeadedBody <AstValue> = 
    v:Heading WSC w:TableExprList SEP? { AST(state).Table(v,w) }
    / &{ Error(state, "heading type expected") } { null };

// list of expression rows: (a,b),etc [same as arg list for fun call]
TableExprList = v:TableExprRow<0,,SEP>;
TableExprRow <AstValue> = LP v:ExpressionList SEP? RPexp { AST(state).TableExprRow(v) }
    / LP &{ Error(state, "expression list expected") } { null };

// list of tuple rows: (A:=a,B:=b),etc
RowList = v:RowOrIdent<0,,SEP>;
RowOrIdent <AstValue> = v:Row { v }
    / v:VarIdent  { AST(state).Variable(v) };

// tuple that can be used as a literal, closed or open expression
Row <AstValue> = LC STAR RCexp { AST(state).Row() }
    / LC v:RowTransList RCexp { AST(state).Row(AST(state).Transformer(v)) }
    / TUP LPexp v:RowTransList RPexp { AST(state).Row(AST(state).Transformer(v)) };

RowTransList = RowTrans<0,,SEP>;
RowTrans <AstField> = v:FieldIdent &(SEP / RC) { AST(state).Transfield(v) }
    / v:Ident LA w:Expression { AST(state).Transfield(v, null, w) }

//--- type reference (after COLON)
TypeRef <AstType> = v:Ident &{ IsTypename(v) } { AST(state).FindType(v) }
    / LC &LC v:Heading RCexp { AST(state).RelType(v) }      // two LC
    / &LC v:Heading { AST(state).TupType(v) }               // one LC
    / TUP !LP { AST(state).FindType("tuple") }
    / REL !LP { AST(state).FindType("relation") }
    / TUP LPexp v:TypeRef RPexp { AST(state).TupType(v) }
    / REL LPexp v:TypeRef RPexp { AST(state).RelType(v) }
    / v:SimplePrimary { AST(state).GetType(v) }
    / &{ Error(state, "type expected") } { null };

// Heading is {: or {ident -- resolve ambiguity elsewhere
// Main thing is to bail before {ident:= or any expr
Heading <AstType> = LC COLON RC { AST(state).Heading(null) }
    / LC &Ident v:FieldList RCexp { AST(state).Heading(v) };

// list of fields, optionally followed by COLON and type
FieldList = v:FieldTerm<0,,SEP>;
FieldTerm <AstField> = v:DefLocal COLON w:TypeRef { AST(state).FieldTerm(v, w) }
    / v:DefLocalExp { AST(state).FieldTerm(v, null) };

//--- expecteds
DefGlobalExp = DefGlobal 
    / v:Ident &{ Error(state, "previously defined '{0}'", v) } { null }
DefLocalExp = DefLocal 
    / v:Ident &{ Error(state, "already defined in this scope '{0}'", v) } { null }
LCexp = (WSC LC / &{ Error(state, "left brace expected") } );
RCexp = (WSC RC / &{ Error(state, "right brace expected") } );
LPexp = (WSC LP / &{ Error(state, "left parenthesis expected") } );
RPexp = (WSC RP / &{ Error(state, "right parenthesis expected") } );
SEPexp = (WSC SEP / &{ Error(state, "comma expected") } );
EOLchk = (&EOL / &{ Error(state, "end of line expected") } );

//----- terminals
DefGlobal = v:Ident &{ CanDefGlobal(v) } { v };
DefLocal = v:Ident &{ CanDefLocal(v) } { v };
Funcop = v:(Ident / Operator) &{ IsFuncop(v) } { v };
FieldIdent = v:Ident &{ IsField(v) } { v };
VarIdent = v:Ident &{ IsVariable(v) } { v };

//--- terminals -- each swallows following whitespace
Ident = !KEYWORD v:IdentName WSO { v };
IdentName = v:IdentQuoted WSO w:TextString { v + w }
    / IdentQuoted 
    / IdentString;
Operator = v:OpSym WSO { v };
Literal<AstValue> = v:Literals WSO { v };
Literals<AstValue> = TRUE { AST(state).Bool("true") }
    / FALSE { AST(state).Bool("false") }
    / v:BinaryQuoted { AST(state).Binary(v) }
    / v:TimeQuoted { AST(state).Time(v) }
    / v:NumberString { AST(state).Number(v) }
    / v:IntegerString { AST(state).Number(v) }
    / v:TextString { AST(state).Text(v) };
Integer = IntegerString WSO;

// these are the only reserved words, but perhaps others could cause trouble?
KEYWORD = TUP / REL / TRUE / FALSE;

// these are reserved words
DEF = "def" IDX;
TYPE = "type" IDX;
REL = ("rel" / "relation") IDX;
TUP = ("tup" / "tuple") IDX;
VAR = "var" IDX;

// these are predefined and reserved in context
ORDER = "order" IDX;
SELECT = "select" IDX;
UPDATE = "update" IDX;

TRUE = "true" IDX;
FALSE = "false" IDX;

// note: tokens followed by WSC will swallow an EOL, WSO just whitespace
RA = "=>" WSO;
LA = ":=" WSO;
COLON = ':' !OpChar WSO;
SEP = ',' WSC;
DOT = '.' WSO;
LC = '{' WSO;
RC = '}' WSO;   // note: gets its own handling
LP = '(' WSC;
RP = ')' WSO;
STAR = '*' !OpChar WSO;
PERCENT = '%' WSO;
MINUS = '-' !OpChar WSO;

IDX = !ID WS*;              // end of ident possibly followed by WS

Skip = (!EOL .)* (EOFX / EOLX);       // skip the rest of the line and hope it then makes sense
WSL = WSO (EOL WSO)*;       // suitable for lookahead
WSC = WSO (EOLX WSO)*;      // continuation, take eol if found, plus WS
WSO = WS*;                  // optional whitespace between tokens
WS = (SP / Comment) { "" };
SP = [ \t];
Comment = "//" (!EOL .)*
        / "/*" (!"*/" (EOLX / .))* "*/";

EOLX = &EOL &{ PrintLine(state) } EOL; // consumed EOL, so print it
EOFX = &EOF &{ PrintLine(state) } EOF;
EOL = "\r"? "\n" { "" };
EOF = !.;

// More complex lexical tokens, but not for use as terminals
//TextString = v:(SingleQuoted / DoubleQuoted / CharHexQuoted / CharDecQuoted)+ { String.Concat(v) };

TextString = v:TextQuoted<1,,WSO> { String.Concat(v) };
TextQuoted = SingleQuoted / DoubleQuoted / CharHexQuoted / CharDecQuoted;

// Lexical tokens, not including white space
SingleQuoted = SQ v:("" (!(CC / SQ) . )* ) SQ { v };
DoubleQuoted = DQ v:("" (!(CC / DQ) . )* ) DQ { v };
CharHexQuoted = "h" SQ SP* v:HexDigits<1,,SP+> SP* SQ { NumToStr(v.ToArray(),16) };
//CharHexQuoted = "h" SQ v:("" SP* (HexDigit+ SP*)*) SQ { v };
CharDecQuoted = "d" SQ SP* v:Digits<1,,SP+> SP* SQ { NumToStr(v.ToArray(),10) };
BinaryQuoted  = "b" SQ v:("" HexDigit*) SQ { v };
TimeQuoted    = 't' SQ v:("" (Digit / Letter / TimeChar)+) SQ { v };
NumberString  = '.' Digit+ / Digit+ ('.' Digit*)?;
IntegerString = "" Digit+ / "$" Digit HexDigit*;
IdentQuoted   = "i" SQ v:("" (!CC !SQ .)* ) SQ { v };
IdentString = (Letter / IdChar) (Letter / Digit / IdChar / IdCharX)*;
OpSym = OpChar OpCharX?;
ID = Letter / Digit / IdChar / IdCharX;
Digits = v:Digit+ { String.Concat(v) };
HexDigits = v:HexDigit+ { String.Concat(v) };

// character sets (not tokens)
Letter = [a-zA-Z];
Digit = [0-9];
HexDigit = [a-fA-F0-9];
OpChar = [&=<>:*/+-]; // tried to include '|', broke COLON!
OpCharX = [&=<>:~*/];
IdChar = [_$@^~];
IdCharX = [#%&?!~`];
TimeChar = [: ./-];
CC = [\x00-\x1f];
SQ = "'";
DQ = '"';
